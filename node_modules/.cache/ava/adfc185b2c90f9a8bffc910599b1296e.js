'use strict';

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('converts black', function (t) {
	var _rec = new _powerAssertRecorder(),
	    _rec2 = new _powerAssertRecorder();

	t.deepEqual(_rec._expr(_rec._capt((0, _index2.default)('#000000'), 'arguments/0'), {
		content: 't.deepEqual(hexToHsl(\'#000000\'), [0, 0, 0])',
		filepath: 'test/hexToHsl.js',
		line: 5
	}), _rec2._expr(_rec2._capt([0, 0, 0], 'arguments/1'), {
		content: 't.deepEqual(hexToHsl(\'#000000\'), [0, 0, 0])',
		filepath: 'test/hexToHsl.js',
		line: 5
	}));
});
(0, _ava2.default)('converts white', function (t) {
	var _rec3 = new _powerAssertRecorder(),
	    _rec4 = new _powerAssertRecorder();

	t.deepEqual(_rec3._expr(_rec3._capt((0, _index2.default)('#ffffff'), 'arguments/0'), {
		content: 't.deepEqual(hexToHsl(\'#ffffff\'), [0, 0, 100])',
		filepath: 'test/hexToHsl.js',
		line: 8
	}), _rec4._expr(_rec4._capt([0, 0, 100], 'arguments/1'), {
		content: 't.deepEqual(hexToHsl(\'#ffffff\'), [0, 0, 100])',
		filepath: 'test/hexToHsl.js',
		line: 8
	}));
});
(0, _ava2.default)('converts grey', function (t) {
	var _rec5 = new _powerAssertRecorder(),
	    _rec6 = new _powerAssertRecorder();

	t.deepEqual(_rec5._expr(_rec5._capt((0, _index2.default)('#ccc'), 'arguments/0'), {
		content: 't.deepEqual(hexToHsl(\'#ccc\'), [0, 0, 100])',
		filepath: 'test/hexToHsl.js',
		line: 11
	}), _rec6._expr(_rec6._capt([0, 0, 100], 'arguments/1'), {
		content: 't.deepEqual(hexToHsl(\'#ccc\'), [0, 0, 100])',
		filepath: 'test/hexToHsl.js',
		line: 11
	}));
});
//# sourceMappingURL=../node_modules/.cache/ava/adfc185b2c90f9a8bffc910599b1296e.js.map